{
  "name": "cytoscape-edgehandles",
  "version": "2.3.2",
  "description": "Edge creation extension for Cytoscape.js",
  "main": "cytoscape-edgehandles.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/cytoscape/cytoscape.js-edgehandles.git"
  },
  "keywords": [
    "cytoscape",
    "cyext"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cytoscape/cytoscape.js-edgehandles/issues"
  },
  "homepage": "https://github.com/cytoscape/cytoscape.js-edgehandles",
  "devDependencies": {
    "gulp": "^3.8.8",
    "gulp-jshint": "^1.8.5",
    "gulp-prompt": "^0.1.1",
    "gulp-replace": "^0.4.0",
    "gulp-shell": "^0.2.9",
    "jshint-stylish": "^1.0.0",
    "run-sequence": "^1.0.0"
  },
  "readme": "cytoscape-edgehandles\n================================================================================\n\n\n![Preview](https://raw.githubusercontent.com/cytoscape/cytoscape.js-edgehandles/master/img/preview.png)\n\n\n## Description\n\nThis extension creates handles on nodes that can be dragged to create edges between nodes.\n\n\n## Dependencies\n\n * jQuery >=1.4\n * Cytoscape.js >=2.2.8\n\n\n## Usage instructions\n\nDownload the library:\n * via npm: `npm install cytoscape-edgehandles`,\n * via bower: `bower install cytoscape-edgehandles`, or\n * via direct download in the repository (probably from a tag).\n\n`require()` the library as appropriate for your project:\n\nCommonJS:\n```js\nvar cytoscape = require('cytoscape');\nvar edgehandles = require('cytoscape-edgehandles');\nvar jquery = require('jquery');\n\nedgehandles( cytoscape, jquery ); // register extension\n```\n\nAMD:\n```js\nrequire(['cytoscape', 'cytoscape-edgehandles', 'jquery'], function( cytoscape, edgehandles, jquery ){\n  edgehandles( cytoscape, jquery ); // register extension\n});\n```\n\nPlain HTML/JS has the extension registered for you automatically, because no `require()` is needed.\n\n\n## Initialisation\n\nYou initialise the extension on the Cytoscape instance:\n\n```js\n\nvar cy = cytoscape({\n  container: document.getElementById('#cy'),\n\t/* ... */\n});\n\n// the default values of each option are outlined below:\nvar defaults = {\n  preview: true, // whether to show added edges preview before releasing selection\n  stackOrder: 4, // Controls stack order of edgehandles canvas element by setting it's z-index\n  handleSize: 10, // the size of the edge handle put on nodes\n  handleColor: '#ff0000', // the colour of the handle and the line drawn from it\n  handleLineType: 'ghost', // can be 'ghost' for real edge, 'straight' for a straight line, or 'draw' for a draw-as-you-go line\n  handleLineWidth: 1, // width of handle line in pixels\n  handleNodes: 'node', // selector/filter function for whether edges can be made from a given node\n  hoverDelay: 150, // time spend over a target node before it is considered a target selection\n  cxt: false, // whether cxt events trigger edgehandles (useful on touch)\n  enabled: true, // whether to start the extension in the enabled state\n  toggleOffOnLeave: false, // whether an edge is cancelled by leaving a node (true), or whether you need to go over again to cancel (false; allows multiple edges in one pass)\n  edgeType: function( sourceNode, targetNode ) {\n    // can return 'flat' for flat edges between nodes or 'node' for intermediate node between them\n    // returning null/undefined means an edge can't be added between the two nodes\n    return 'flat';\n  },\n  loopAllowed: function( node ) {\n    // for the specified node, return whether edges from itself to itself are allowed\n    return false;\n  },\n  nodeLoopOffset: -50, // offset for edgeType: 'node' loops\n  nodeParams: function( sourceNode, targetNode ) {\n    // for edges between the specified source and target\n    // return element object to be passed to cy.add() for intermediary node\n    return {};\n  },\n  edgeParams: function( sourceNode, targetNode, i ) {\n    // for edges between the specified source and target\n    // return element object to be passed to cy.add() for edge\n    // NB: i indicates edge index in case of edgeType: 'node'\n    return {};\n  },\n  start: function( sourceNode ) {\n    // fired when edgehandles interaction starts (drag on handle)\n  },\n  complete: function( sourceNode, targetNodes, addedEntities ) {\n    // fired when edgehandles is done and entities are added\n  },\n  stop: function( sourceNode ) {\n    // fired when edgehandles interaction is stopped (either complete with added edges or incomplete)\n  }\n};\n\ncy.edgehandles( defaults );\n\n```\n\n## Classes\n\nThese classes can be used for styling the graph as it interacts with the extension:\n\n* `edgehandles-source` : The source node\n* `edgehandles-target` : A target node\n* `edgehandles-preview` : Preview elements (used with `options.preview: true`)\n* `edgehandles-hover` : Added to nodes as they are hovered over as targets\n* `edgehandles-ghost-edge` : The ghost handle line edge\n\n\n## Events\n\nDuring the course of a user's interaction with the extension, several events are generated and triggered on the corresponding elements:\n\nOn the source node:\n\n * `cyedgehandles.showhandle` : when the handle is shown\n * `cyedgehandles.start` : when starting to drag on the handle\n * `cyedgehandles.stop` : when the handle is released\n * `cyedgehandles.complete` : when the handle has been released and edges are created\n\nOn the target node:\n\n * `cyedgehandles.addpreview` : when a preview is shown (i.e. target selected)\n * `cyedgehandles.removepreview` : when a preview is removed (i.e. target unselected)\n\nExample binding:\n\n```js\ncy.on('cyedgehandles.start', 'node', function(e){\n\tvar srcNode = this;\n\n\t// ...\n});\n```\n\n## Extension functions\n\nAll function can be called via `cy.edgehandles('function-name')`:\n\n * `cy.edgehandles('enable')` : enable the extension\n * `cy.edgehandles('enable')` : disable the extension\n * `cy.edgehandles('option', 'preview', false)` : set individual option (e.g. `'preview'`)\n * `cy.edgehandles('option', { /* options */ })` : set all options\n * `cy.edgehandles('option', 'preview')` : get option value (e.g. `'preview'`)\n * `cy.edgehandles('destroy')` : destroy the extension instance\n * `cy.edgehandles('start', 'some-node-id')` : start the handle drag state on node with specified id (e.g. `'some-node-id'`)\n * `cy.edgehandles('drawon')` : enable draw mode\n * `cy.edgehandles('drawoff')` : disable draw mode\n\n\n## Publishing instructions\n\nThis project is set up to automatically be published to npm and bower.  To publish:\n\n1. Set the version number environment variable: `export VERSION=1.2.3`\n1. Publish: `gulp publish`\n1. If publishing to bower for the first time, you'll need to run `bower register cytoscape-edgehandles https://github.com/cytoscape/cytoscape.js-edgehandles.git`\n",
  "readmeFilename": "README.md",
  "_id": "cytoscape-edgehandles@2.3.2",
  "dist": {
    "shasum": "db0516333ee2ee194655b8187fc5de66b9f5f0d9"
  },
  "_from": "cytoscape-edgehandles@",
  "_resolved": "https://registry.npmjs.org/cytoscape-edgehandles/-/cytoscape-edgehandles-2.3.2.tgz"
}
